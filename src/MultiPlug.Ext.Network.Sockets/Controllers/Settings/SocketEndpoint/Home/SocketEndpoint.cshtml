@model MultiPlug.Base.Http.EdgeApp

@functions
{
    string isCurrentLoggingLevel(int theLevel)
    {
        return (@Model.Extension.Model.LoggingLevel == theLevel) ? "selected" : "";
    }
    string isChecked(bool theValue)
    {
        return (theValue) ? "checked" : "";
    }
}
@{
    string[][] WriteSugestions = new string[][]
    {
        new string[]{ "\\u0020", "Space" },
        new string[]{ "\\u0000", "NUL (Null)" },
        new string[]{ "\\u0001", "SOH (Start of Heading)" },
        new string[]{ "\\u0002", "STX (Start of Text)" },
        new string[]{ "\\u0003", "ETX (End of Text)" },
        new string[]{ "\\u0004", "EOT (End of Transmission)" },
        new string[]{ "\\u0005", "ENQ (Enquiry)" },
        new string[]{ "\\u0006", "ACK (Acknowledge)" },
        new string[]{ "\\u000A", "LF (Line Feed)" },
        new string[]{ "\\u000D", "CR (Carriage Return)" }
    };
}

<form action="" id="FormLogging" style="display:none;" method="post" accept-charset="utf-8" enctype="application/x-www-form-urlencoded" spellcheck="false" autocomplete="off"></form>
    <section class="row-fluid">

        <div class="row-fluid">
            <div class="box">
                <div class="span3">
                    <a style="line-height: 52px;" href="#"><img alt="Network Logo" src="@Raw(Model.Context.Paths.Assets)images/networks.png"></a>
                </div>
                <div class="span6">
                    <p style="font-size:26px; line-height: 54px; text-align: center; margin: 0px;">Socket Endpoint</p>
                </div>
                <div class="span3" style="text-align: right;">
                    <button type="submit" value="submit" form="FormLogging" style="height:54px; width:65px" class="item btn btn-green"><i class="icon-save icon-large"></i><p>Save</p></button>
                </div>
            </div>
        </div>

        <input type="hidden" name="guid" form="FormLogging" value="@Model.Extension.Model.Guid">

        @Include("MultiPlug.Ext.Network.Sockets.NetworkSocketsEndpointNavigation")

        <div class="row-fluid">
            <div class="box">
                <h3 class="box-header">Connections</h3>
                <div class="box non-collapsible">
                    <h4>Clients</h4>
                    <div class="row-fluid">
                        <div class="well">
                            <div class="row-fluid">
                                <div class="span6">
                                    <h5>IP Address</h5>
                                </div>
                                <div class="span6">
                                    <h5>Disconnect</h5>
                                </div>
                            </div>
@foreach (var item in Model.Extension.Model.ConnectedClients)
{
                            <div class="row-fluid">
                                <div class="span6">
                                    <p>@item.Address</p>
                                </div>
                                <div class="span6">
                                    <form action="@Raw(Model.Context.Paths.Current)disconnect/" method="post" accept-charset="utf-8" enctype="application/x-www-form-urlencoded">
                                        <input type="hidden" name="guid" value="@Model.Extension.Model.Guid">
                                        <input type="hidden" name="clientguid" value="@item.Guid">
                                        <button class="btn btn-red btn-small" type="submit"><i class="icon-trash"></i></button>
                                    </form>
                                </div>
                            </div>
}
                        </div>
                    </div>
                </div>

                <h3 class="box-header">Terminal</h3>
                <div class="box non-collapsible">
                    <div class="row-fluid">
                        <div class="row-fluid">
                            <div class="input-prepend input-append" style="display:flex; margin-bottom: 0px">
                                <div class="btn-group">
                                    <button class="btn dropdown-toggle" data-toggle="dropdown" tabindex="-1">
                                        <span class="caret">
                                        </span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        @for (int j = 0; j < WriteSugestions.Length; j++)
                                        {
                                            <li>
                                                <a class="WriteSuggestion" data-suggestiontext="@WriteSugestions[j][0]" href="#">@WriteSugestions[j][1]</a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <input id="TerminalSend" class="span12" type="text" value="" spellcheck="false" autocomplete="off">
                                <div class="btn-group">
                                    <button class="btn btn-blue btn-terminal-send" tabindex="-1">Send</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <h3 class="box-header">Logging</h3>
                <div class="box non-collapsible">
                    <div class="row-fluid">
                        <div class="well">
                            <div class="row-fluid">
                                <div class="span6">
                                    <div class="row-fluid"><div class="span12">Level</div></div>
                                    <div class="row-fluid">
                                        <div class="span12">
                                            <select name="LoggingLevel" form="FormLogging">
                                                <option value="0" @isCurrentLoggingLevel(0)>Errors</option>
                                                <option value="1" @isCurrentLoggingLevel(1)>Basic</option>
                                                <option value="2" @isCurrentLoggingLevel(2)>Verbose</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div class="span6">
                                    <div class="row-fluid"><div class="span12">Show Control Characters</div></div>
                                    <div class="row-fluid">
                                        <div class="span12">
                                            <input type="checkbox" name="LoggingShowControlCharacters" value="true" form="FormLogging" @Raw(isChecked(Model.Extension.Model.LoggingShowControlCharacters))>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <h4>Event Log</h4>
                    <div class="row-fluid">
                        <div class="well">
                            <div class="row-fluid">
                                <div class="span12">
                                    <textarea id="Logging" spellcheck="false" rows="10" class="input-block-level">@Model.Extension.Model.TraceLog
</textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

<script>
    function scrollLogToBottom(loggingTextArea) {
        var textarea = document.getElementById(loggingTextArea);
        textarea.scrollTop = textarea.scrollHeight;
    }

    $.connection.wS.on("Send", function (id, Group) {
        var loggingTextArea = $('#Logging');
        loggingTextArea.text(loggingTextArea.text() + Group.Subjects[1].Value + '\n');
        scrollLogToBottom('Logging');
    });

    $(document).ready(function () {
        scrollLogToBottom('Logging');

        $(window).keydown(function (event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                $(".btn-terminal-send").click();
            }
        });
    });

    function applyWriteSuggestion() {
        $('.WriteSuggestion').click(function (event) {
            event.preventDefault();
            var inputtext = $(this).closest(".input-prepend").find("input");
            $(inputtext).val($(inputtext).val() + $(this).attr("data-suggestiontext"));
        });
    }

    applyWriteSuggestion();

    $(".btn-terminal-send").click(function (event) {
        event.preventDefault();
        $.post('@Raw(Model.Context.Paths.Current)' + '/terminal' + '?id=@Model.Extension.Model.Guid' + '&send=' + $("#TerminalSend").val(), function (data) {
        })
        .done(function () {
        });
    });
</script>